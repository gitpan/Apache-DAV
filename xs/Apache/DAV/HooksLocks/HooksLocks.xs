
/*
 * *********** WARNING **************
 * This file generated by Apache::DAV::WrapXS/0.01
 * Any changes made here will be lost
 * ***********************************
 * 1. /opt/perl5.6.1/lib/site_perl/5.6.1/ExtUtils/XSBuilder/WrapXS.pm:38
 * 2. /opt/perl5.6.1/lib/site_perl/5.6.1/ExtUtils/XSBuilder/WrapXS.pm:1898
 * 3. xsbuilder/xs_generate.pl:6
 */


#include "mod_dav.h"

#include "EXTERN.h"

#include "perl.h"

#include "XSUB.h"

#include "moddav_xs_sv_convert.h"

#include "moddav_xs_typedefs.h"

static SV * davxs_Apache__DAV__HooksLocks_obj[4] ;



void Apache__DAV__HooksLocks_new_init (pTHX_ Apache__DAV__HooksLocks  obj, SV * item, int overwrite) {

    SV * * tmpsv ;

    if (SvTYPE(item) == SVt_PVMG) 
        memcpy (obj, (void *)SvIVX(item), sizeof (*obj)) ;
    else if (SvTYPE(item) == SVt_PVHV) {
   ; }

    else
        croak ("initializer for Apache::DAV::HooksLocks::new is not a hash or object reference") ;

} ;



/* --- Apache::DAV::HooksLocks -> lookup_resource --- */



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__lookup_resource (SV * __cbdest,dav_lockdb * lockdb,const dav_locktoken * locktoken,const dav_resource * start_resource,const dav_resource * * resource)
    {
    Apache__DAV__Error __retval ;
    SV * __retsv ;

    int __cnt ;
    
    dSP ;
    ENTER ;
    SAVETMPS ;
    PUSHMARK(SP) ;
    PUSHs(__cbdest) ;
    PUSHs(davxs_Apache__DAV__LockDB_2obj(lockdb)) ;
    PUSHs(davxs_Apache__DAV__LockToken_2obj(locktoken)) ;
    PUSHs(davxs_Apache__DAV__Resource_2obj(start_resource)) ;

    PUTBACK ;
    __cnt = perl_call_method("lookup_resource", G_ARRAY) ;


    if (__cnt != 2)
        croak ("davxs_cb_Apache__DAV__HooksLocks__lookup_resource expected 2 return values") ;

    SPAGAIN ;
    __retsv = POPs;
    __retval = (Apache__DAV__Error)davxs_sv2_Apache__DAV__Error(__retsv);
    __retsv = POPs;
    *resource = (const dav_resource *)davxs_sv2_Apache__DAV__Resource(__retsv);

    PUTBACK ;
    FREETMPS ;
    LEAVE ;
    
   
    return __retval ;

    }
   


static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__lookup_resource_obj0 (dav_lockdb * lockdb,const dav_locktoken * locktoken,const dav_resource * start_resource,const dav_resource * * resource)
    {
    return davxs_cb_Apache__DAV__HooksLocks__lookup_resource (davxs_Apache__DAV__HooksLocks_obj[0],lockdb,locktoken,start_resource,resource) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__lookup_resource_obj1 (dav_lockdb * lockdb,const dav_locktoken * locktoken,const dav_resource * start_resource,const dav_resource * * resource)
    {
    return davxs_cb_Apache__DAV__HooksLocks__lookup_resource (davxs_Apache__DAV__HooksLocks_obj[1],lockdb,locktoken,start_resource,resource) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__lookup_resource_obj2 (dav_lockdb * lockdb,const dav_locktoken * locktoken,const dav_resource * start_resource,const dav_resource * * resource)
    {
    return davxs_cb_Apache__DAV__HooksLocks__lookup_resource (davxs_Apache__DAV__HooksLocks_obj[2],lockdb,locktoken,start_resource,resource) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__lookup_resource_obj3 (dav_lockdb * lockdb,const dav_locktoken * locktoken,const dav_resource * start_resource,const dav_resource * * resource)
    {
    return davxs_cb_Apache__DAV__HooksLocks__lookup_resource (davxs_Apache__DAV__HooksLocks_obj[3],lockdb,locktoken,start_resource,resource) ;
    }

typedef Apache__DAV__Error (*tdavxs_cb_Apache__DAV__HooksLocks__lookup_resource_func)(dav_lockdb * lockdb,const dav_locktoken * locktoken,const dav_resource * start_resource,const dav_resource * * resource)  ;
static tdavxs_cb_Apache__DAV__HooksLocks__lookup_resource_func davxs_davxs_cb_Apache__DAV__HooksLocks__lookup_resource_func [4] = {
    davxs_cb_Apache__DAV__HooksLocks__lookup_resource_obj0,
    davxs_cb_Apache__DAV__HooksLocks__lookup_resource_obj1,
    davxs_cb_Apache__DAV__HooksLocks__lookup_resource_obj2,
    davxs_cb_Apache__DAV__HooksLocks__lookup_resource_obj3
    } ;



/* --- Apache::DAV::HooksLocks -> refresh_locks --- */



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__refresh_locks (SV * __cbdest,dav_lockdb * lockdb,const dav_resource * resource,const dav_locktoken_list * ltl,time_t new_time,dav_lock * * locks)
    {
    Apache__DAV__Error __retval ;
    SV * __retsv ;

    int __cnt ;
    
    dSP ;
    ENTER ;
    SAVETMPS ;
    PUSHMARK(SP) ;
    PUSHs(__cbdest) ;
    PUSHs(davxs_Apache__DAV__LockDB_2obj(lockdb)) ;
    PUSHs(davxs_Apache__DAV__Resource_2obj(resource)) ;
    PUSHs(davxs_Apache__DAV__LockTokenList_2obj(ltl)) ;
    PUSHs(davxs_NV_2obj(new_time)) ;

    PUTBACK ;
    __cnt = perl_call_method("refresh_locks", G_ARRAY) ;


    if (__cnt != 2)
        croak ("davxs_cb_Apache__DAV__HooksLocks__refresh_locks expected 2 return values") ;

    SPAGAIN ;
    __retsv = POPs;
    __retval = (Apache__DAV__Error)davxs_sv2_Apache__DAV__Error(__retsv);
    __retsv = POPs;
    *locks = (dav_lock *)davxs_sv2_Apache__DAV__Lock(__retsv);

    PUTBACK ;
    FREETMPS ;
    LEAVE ;
    
   
    return __retval ;

    }
   


static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__refresh_locks_obj0 (dav_lockdb * lockdb,const dav_resource * resource,const dav_locktoken_list * ltl,time_t new_time,dav_lock * * locks)
    {
    return davxs_cb_Apache__DAV__HooksLocks__refresh_locks (davxs_Apache__DAV__HooksLocks_obj[0],lockdb,resource,ltl,new_time,locks) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__refresh_locks_obj1 (dav_lockdb * lockdb,const dav_resource * resource,const dav_locktoken_list * ltl,time_t new_time,dav_lock * * locks)
    {
    return davxs_cb_Apache__DAV__HooksLocks__refresh_locks (davxs_Apache__DAV__HooksLocks_obj[1],lockdb,resource,ltl,new_time,locks) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__refresh_locks_obj2 (dav_lockdb * lockdb,const dav_resource * resource,const dav_locktoken_list * ltl,time_t new_time,dav_lock * * locks)
    {
    return davxs_cb_Apache__DAV__HooksLocks__refresh_locks (davxs_Apache__DAV__HooksLocks_obj[2],lockdb,resource,ltl,new_time,locks) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__refresh_locks_obj3 (dav_lockdb * lockdb,const dav_resource * resource,const dav_locktoken_list * ltl,time_t new_time,dav_lock * * locks)
    {
    return davxs_cb_Apache__DAV__HooksLocks__refresh_locks (davxs_Apache__DAV__HooksLocks_obj[3],lockdb,resource,ltl,new_time,locks) ;
    }

typedef Apache__DAV__Error (*tdavxs_cb_Apache__DAV__HooksLocks__refresh_locks_func)(dav_lockdb * lockdb,const dav_resource * resource,const dav_locktoken_list * ltl,time_t new_time,dav_lock * * locks)  ;
static tdavxs_cb_Apache__DAV__HooksLocks__refresh_locks_func davxs_davxs_cb_Apache__DAV__HooksLocks__refresh_locks_func [4] = {
    davxs_cb_Apache__DAV__HooksLocks__refresh_locks_obj0,
    davxs_cb_Apache__DAV__HooksLocks__refresh_locks_obj1,
    davxs_cb_Apache__DAV__HooksLocks__refresh_locks_obj2,
    davxs_cb_Apache__DAV__HooksLocks__refresh_locks_obj3
    } ;



/* --- Apache::DAV::HooksLocks -> remove_lock --- */



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__remove_lock (SV * __cbdest,dav_lockdb * lockdb,const dav_resource * resource,const dav_locktoken * locktoken)
    {
    Apache__DAV__Error __retval ;
    SV * __retsv ;

    int __cnt ;
    
    dSP ;
    ENTER ;
    SAVETMPS ;
    PUSHMARK(SP) ;
    PUSHs(__cbdest) ;
    PUSHs(davxs_Apache__DAV__LockDB_2obj(lockdb)) ;
    PUSHs(davxs_Apache__DAV__Resource_2obj(resource)) ;
    PUSHs(davxs_Apache__DAV__LockToken_2obj(locktoken)) ;

    PUTBACK ;
    __cnt = perl_call_method("remove_lock", G_SCALAR) ;


    if (__cnt != 1)
        croak ("davxs_cb_Apache__DAV__HooksLocks__remove_lock expected 1 return values") ;

    SPAGAIN ;
    __retsv = POPs;
    __retval = (Apache__DAV__Error)davxs_sv2_Apache__DAV__Error(__retsv);

    PUTBACK ;
    FREETMPS ;
    LEAVE ;
    
   
    return __retval ;

    }
   


static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__remove_lock_obj0 (dav_lockdb * lockdb,const dav_resource * resource,const dav_locktoken * locktoken)
    {
    return davxs_cb_Apache__DAV__HooksLocks__remove_lock (davxs_Apache__DAV__HooksLocks_obj[0],lockdb,resource,locktoken) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__remove_lock_obj1 (dav_lockdb * lockdb,const dav_resource * resource,const dav_locktoken * locktoken)
    {
    return davxs_cb_Apache__DAV__HooksLocks__remove_lock (davxs_Apache__DAV__HooksLocks_obj[1],lockdb,resource,locktoken) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__remove_lock_obj2 (dav_lockdb * lockdb,const dav_resource * resource,const dav_locktoken * locktoken)
    {
    return davxs_cb_Apache__DAV__HooksLocks__remove_lock (davxs_Apache__DAV__HooksLocks_obj[2],lockdb,resource,locktoken) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__remove_lock_obj3 (dav_lockdb * lockdb,const dav_resource * resource,const dav_locktoken * locktoken)
    {
    return davxs_cb_Apache__DAV__HooksLocks__remove_lock (davxs_Apache__DAV__HooksLocks_obj[3],lockdb,resource,locktoken) ;
    }

typedef Apache__DAV__Error (*tdavxs_cb_Apache__DAV__HooksLocks__remove_lock_func)(dav_lockdb * lockdb,const dav_resource * resource,const dav_locktoken * locktoken)  ;
static tdavxs_cb_Apache__DAV__HooksLocks__remove_lock_func davxs_davxs_cb_Apache__DAV__HooksLocks__remove_lock_func [4] = {
    davxs_cb_Apache__DAV__HooksLocks__remove_lock_obj0,
    davxs_cb_Apache__DAV__HooksLocks__remove_lock_obj1,
    davxs_cb_Apache__DAV__HooksLocks__remove_lock_obj2,
    davxs_cb_Apache__DAV__HooksLocks__remove_lock_obj3
    } ;



/* --- Apache::DAV::HooksLocks -> append_locks --- */



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__append_locks (SV * __cbdest,dav_lockdb * lockdb,const dav_resource * resource,int make_indirect,const dav_lock * lock)
    {
    Apache__DAV__Error __retval ;
    SV * __retsv ;

    int __cnt ;
    
    dSP ;
    ENTER ;
    SAVETMPS ;
    PUSHMARK(SP) ;
    PUSHs(__cbdest) ;
    PUSHs(davxs_Apache__DAV__LockDB_2obj(lockdb)) ;
    PUSHs(davxs_Apache__DAV__Resource_2obj(resource)) ;
    PUSHs(davxs_IV_2obj(make_indirect)) ;
    PUSHs(davxs_Apache__DAV__Lock_2obj(lock)) ;

    PUTBACK ;
    __cnt = perl_call_method("append_locks", G_SCALAR) ;


    if (__cnt != 1)
        croak ("davxs_cb_Apache__DAV__HooksLocks__append_locks expected 1 return values") ;

    SPAGAIN ;
    __retsv = POPs;
    __retval = (Apache__DAV__Error)davxs_sv2_Apache__DAV__Error(__retsv);

    PUTBACK ;
    FREETMPS ;
    LEAVE ;
    
   
    return __retval ;

    }
   


static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__append_locks_obj0 (dav_lockdb * lockdb,const dav_resource * resource,int make_indirect,const dav_lock * lock)
    {
    return davxs_cb_Apache__DAV__HooksLocks__append_locks (davxs_Apache__DAV__HooksLocks_obj[0],lockdb,resource,make_indirect,lock) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__append_locks_obj1 (dav_lockdb * lockdb,const dav_resource * resource,int make_indirect,const dav_lock * lock)
    {
    return davxs_cb_Apache__DAV__HooksLocks__append_locks (davxs_Apache__DAV__HooksLocks_obj[1],lockdb,resource,make_indirect,lock) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__append_locks_obj2 (dav_lockdb * lockdb,const dav_resource * resource,int make_indirect,const dav_lock * lock)
    {
    return davxs_cb_Apache__DAV__HooksLocks__append_locks (davxs_Apache__DAV__HooksLocks_obj[2],lockdb,resource,make_indirect,lock) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__append_locks_obj3 (dav_lockdb * lockdb,const dav_resource * resource,int make_indirect,const dav_lock * lock)
    {
    return davxs_cb_Apache__DAV__HooksLocks__append_locks (davxs_Apache__DAV__HooksLocks_obj[3],lockdb,resource,make_indirect,lock) ;
    }

typedef Apache__DAV__Error (*tdavxs_cb_Apache__DAV__HooksLocks__append_locks_func)(dav_lockdb * lockdb,const dav_resource * resource,int make_indirect,const dav_lock * lock)  ;
static tdavxs_cb_Apache__DAV__HooksLocks__append_locks_func davxs_davxs_cb_Apache__DAV__HooksLocks__append_locks_func [4] = {
    davxs_cb_Apache__DAV__HooksLocks__append_locks_obj0,
    davxs_cb_Apache__DAV__HooksLocks__append_locks_obj1,
    davxs_cb_Apache__DAV__HooksLocks__append_locks_obj2,
    davxs_cb_Apache__DAV__HooksLocks__append_locks_obj3
    } ;



/* --- Apache::DAV::HooksLocks -> find_lock --- */



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__find_lock (SV * __cbdest,dav_lockdb * lockdb,const dav_resource * resource,const dav_locktoken * locktoken,int partial_ok,dav_lock * * lock)
    {
    Apache__DAV__Error __retval ;
    SV * __retsv ;

    int __cnt ;
    
    dSP ;
    ENTER ;
    SAVETMPS ;
    PUSHMARK(SP) ;
    PUSHs(__cbdest) ;
    PUSHs(davxs_Apache__DAV__LockDB_2obj(lockdb)) ;
    PUSHs(davxs_Apache__DAV__Resource_2obj(resource)) ;
    PUSHs(davxs_Apache__DAV__LockToken_2obj(locktoken)) ;
    PUSHs(davxs_IV_2obj(partial_ok)) ;

    PUTBACK ;
    __cnt = perl_call_method("find_lock", G_ARRAY) ;


    if (__cnt != 2)
        croak ("davxs_cb_Apache__DAV__HooksLocks__find_lock expected 2 return values") ;

    SPAGAIN ;
    __retsv = POPs;
    __retval = (Apache__DAV__Error)davxs_sv2_Apache__DAV__Error(__retsv);
    __retsv = POPs;
    *lock = (dav_lock *)davxs_sv2_Apache__DAV__Lock(__retsv);

    PUTBACK ;
    FREETMPS ;
    LEAVE ;
    
   
    return __retval ;

    }
   


static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__find_lock_obj0 (dav_lockdb * lockdb,const dav_resource * resource,const dav_locktoken * locktoken,int partial_ok,dav_lock * * lock)
    {
    return davxs_cb_Apache__DAV__HooksLocks__find_lock (davxs_Apache__DAV__HooksLocks_obj[0],lockdb,resource,locktoken,partial_ok,lock) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__find_lock_obj1 (dav_lockdb * lockdb,const dav_resource * resource,const dav_locktoken * locktoken,int partial_ok,dav_lock * * lock)
    {
    return davxs_cb_Apache__DAV__HooksLocks__find_lock (davxs_Apache__DAV__HooksLocks_obj[1],lockdb,resource,locktoken,partial_ok,lock) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__find_lock_obj2 (dav_lockdb * lockdb,const dav_resource * resource,const dav_locktoken * locktoken,int partial_ok,dav_lock * * lock)
    {
    return davxs_cb_Apache__DAV__HooksLocks__find_lock (davxs_Apache__DAV__HooksLocks_obj[2],lockdb,resource,locktoken,partial_ok,lock) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__find_lock_obj3 (dav_lockdb * lockdb,const dav_resource * resource,const dav_locktoken * locktoken,int partial_ok,dav_lock * * lock)
    {
    return davxs_cb_Apache__DAV__HooksLocks__find_lock (davxs_Apache__DAV__HooksLocks_obj[3],lockdb,resource,locktoken,partial_ok,lock) ;
    }

typedef Apache__DAV__Error (*tdavxs_cb_Apache__DAV__HooksLocks__find_lock_func)(dav_lockdb * lockdb,const dav_resource * resource,const dav_locktoken * locktoken,int partial_ok,dav_lock * * lock)  ;
static tdavxs_cb_Apache__DAV__HooksLocks__find_lock_func davxs_davxs_cb_Apache__DAV__HooksLocks__find_lock_func [4] = {
    davxs_cb_Apache__DAV__HooksLocks__find_lock_obj0,
    davxs_cb_Apache__DAV__HooksLocks__find_lock_obj1,
    davxs_cb_Apache__DAV__HooksLocks__find_lock_obj2,
    davxs_cb_Apache__DAV__HooksLocks__find_lock_obj3
    } ;



/* --- Apache::DAV::HooksLocks -> get_locks --- */



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__get_locks (SV * __cbdest,dav_lockdb * lockdb,const dav_resource * resource,int calltype,dav_lock * * locks)
    {
    Apache__DAV__Error __retval ;
    SV * __retsv ;

    int __cnt ;
    
    dSP ;
    ENTER ;
    SAVETMPS ;
    PUSHMARK(SP) ;
    PUSHs(__cbdest) ;
    PUSHs(davxs_Apache__DAV__LockDB_2obj(lockdb)) ;
    PUSHs(davxs_Apache__DAV__Resource_2obj(resource)) ;
    PUSHs(davxs_IV_2obj(calltype)) ;

    PUTBACK ;
    __cnt = perl_call_method("get_locks", G_ARRAY) ;


    if (__cnt != 2)
        croak ("davxs_cb_Apache__DAV__HooksLocks__get_locks expected 2 return values") ;

    SPAGAIN ;
    __retsv = POPs;
    __retval = (Apache__DAV__Error)davxs_sv2_Apache__DAV__Error(__retsv);
    __retsv = POPs;
    *locks = (dav_lock *)davxs_sv2_Apache__DAV__Lock(__retsv);

    PUTBACK ;
    FREETMPS ;
    LEAVE ;
    
   
    return __retval ;

    }
   


static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__get_locks_obj0 (dav_lockdb * lockdb,const dav_resource * resource,int calltype,dav_lock * * locks)
    {
    return davxs_cb_Apache__DAV__HooksLocks__get_locks (davxs_Apache__DAV__HooksLocks_obj[0],lockdb,resource,calltype,locks) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__get_locks_obj1 (dav_lockdb * lockdb,const dav_resource * resource,int calltype,dav_lock * * locks)
    {
    return davxs_cb_Apache__DAV__HooksLocks__get_locks (davxs_Apache__DAV__HooksLocks_obj[1],lockdb,resource,calltype,locks) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__get_locks_obj2 (dav_lockdb * lockdb,const dav_resource * resource,int calltype,dav_lock * * locks)
    {
    return davxs_cb_Apache__DAV__HooksLocks__get_locks (davxs_Apache__DAV__HooksLocks_obj[2],lockdb,resource,calltype,locks) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__get_locks_obj3 (dav_lockdb * lockdb,const dav_resource * resource,int calltype,dav_lock * * locks)
    {
    return davxs_cb_Apache__DAV__HooksLocks__get_locks (davxs_Apache__DAV__HooksLocks_obj[3],lockdb,resource,calltype,locks) ;
    }

typedef Apache__DAV__Error (*tdavxs_cb_Apache__DAV__HooksLocks__get_locks_func)(dav_lockdb * lockdb,const dav_resource * resource,int calltype,dav_lock * * locks)  ;
static tdavxs_cb_Apache__DAV__HooksLocks__get_locks_func davxs_davxs_cb_Apache__DAV__HooksLocks__get_locks_func [4] = {
    davxs_cb_Apache__DAV__HooksLocks__get_locks_obj0,
    davxs_cb_Apache__DAV__HooksLocks__get_locks_obj1,
    davxs_cb_Apache__DAV__HooksLocks__get_locks_obj2,
    davxs_cb_Apache__DAV__HooksLocks__get_locks_obj3
    } ;



/* --- Apache::DAV::HooksLocks -> create_lock --- */



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__create_lock (SV * __cbdest,dav_lockdb * lockdb,const dav_resource * resource,dav_lock * * lock)
    {
    Apache__DAV__Error __retval ;
    SV * __retsv ;

    int __cnt ;
    
    dSP ;
    ENTER ;
    SAVETMPS ;
    PUSHMARK(SP) ;
    PUSHs(__cbdest) ;
    PUSHs(davxs_Apache__DAV__LockDB_2obj(lockdb)) ;
    PUSHs(davxs_Apache__DAV__Resource_2obj(resource)) ;

    PUTBACK ;
    __cnt = perl_call_method("create_lock", G_ARRAY) ;


    if (__cnt != 2)
        croak ("davxs_cb_Apache__DAV__HooksLocks__create_lock expected 2 return values") ;

    SPAGAIN ;
    __retsv = POPs;
    __retval = (Apache__DAV__Error)davxs_sv2_Apache__DAV__Error(__retsv);
    __retsv = POPs;
    *lock = (dav_lock *)davxs_sv2_Apache__DAV__Lock(__retsv);

    PUTBACK ;
    FREETMPS ;
    LEAVE ;
    
   
    return __retval ;

    }
   


static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__create_lock_obj0 (dav_lockdb * lockdb,const dav_resource * resource,dav_lock * * lock)
    {
    return davxs_cb_Apache__DAV__HooksLocks__create_lock (davxs_Apache__DAV__HooksLocks_obj[0],lockdb,resource,lock) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__create_lock_obj1 (dav_lockdb * lockdb,const dav_resource * resource,dav_lock * * lock)
    {
    return davxs_cb_Apache__DAV__HooksLocks__create_lock (davxs_Apache__DAV__HooksLocks_obj[1],lockdb,resource,lock) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__create_lock_obj2 (dav_lockdb * lockdb,const dav_resource * resource,dav_lock * * lock)
    {
    return davxs_cb_Apache__DAV__HooksLocks__create_lock (davxs_Apache__DAV__HooksLocks_obj[2],lockdb,resource,lock) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__create_lock_obj3 (dav_lockdb * lockdb,const dav_resource * resource,dav_lock * * lock)
    {
    return davxs_cb_Apache__DAV__HooksLocks__create_lock (davxs_Apache__DAV__HooksLocks_obj[3],lockdb,resource,lock) ;
    }

typedef Apache__DAV__Error (*tdavxs_cb_Apache__DAV__HooksLocks__create_lock_func)(dav_lockdb * lockdb,const dav_resource * resource,dav_lock * * lock)  ;
static tdavxs_cb_Apache__DAV__HooksLocks__create_lock_func davxs_davxs_cb_Apache__DAV__HooksLocks__create_lock_func [4] = {
    davxs_cb_Apache__DAV__HooksLocks__create_lock_obj0,
    davxs_cb_Apache__DAV__HooksLocks__create_lock_obj1,
    davxs_cb_Apache__DAV__HooksLocks__create_lock_obj2,
    davxs_cb_Apache__DAV__HooksLocks__create_lock_obj3
    } ;



/* --- Apache::DAV::HooksLocks -> remove_locknull_state --- */



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__remove_locknull_state (SV * __cbdest,dav_lockdb * lockdb,const dav_resource * resource)
    {
    Apache__DAV__Error __retval ;
    SV * __retsv ;

    int __cnt ;
    
    dSP ;
    ENTER ;
    SAVETMPS ;
    PUSHMARK(SP) ;
    PUSHs(__cbdest) ;
    PUSHs(davxs_Apache__DAV__LockDB_2obj(lockdb)) ;
    PUSHs(davxs_Apache__DAV__Resource_2obj(resource)) ;

    PUTBACK ;
    __cnt = perl_call_method("remove_locknull_state", G_SCALAR) ;


    if (__cnt != 1)
        croak ("davxs_cb_Apache__DAV__HooksLocks__remove_locknull_state expected 1 return values") ;

    SPAGAIN ;
    __retsv = POPs;
    __retval = (Apache__DAV__Error)davxs_sv2_Apache__DAV__Error(__retsv);

    PUTBACK ;
    FREETMPS ;
    LEAVE ;
    
   
    return __retval ;

    }
   


static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__remove_locknull_state_obj0 (dav_lockdb * lockdb,const dav_resource * resource)
    {
    return davxs_cb_Apache__DAV__HooksLocks__remove_locknull_state (davxs_Apache__DAV__HooksLocks_obj[0],lockdb,resource) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__remove_locknull_state_obj1 (dav_lockdb * lockdb,const dav_resource * resource)
    {
    return davxs_cb_Apache__DAV__HooksLocks__remove_locknull_state (davxs_Apache__DAV__HooksLocks_obj[1],lockdb,resource) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__remove_locknull_state_obj2 (dav_lockdb * lockdb,const dav_resource * resource)
    {
    return davxs_cb_Apache__DAV__HooksLocks__remove_locknull_state (davxs_Apache__DAV__HooksLocks_obj[2],lockdb,resource) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__remove_locknull_state_obj3 (dav_lockdb * lockdb,const dav_resource * resource)
    {
    return davxs_cb_Apache__DAV__HooksLocks__remove_locknull_state (davxs_Apache__DAV__HooksLocks_obj[3],lockdb,resource) ;
    }

typedef Apache__DAV__Error (*tdavxs_cb_Apache__DAV__HooksLocks__remove_locknull_state_func)(dav_lockdb * lockdb,const dav_resource * resource)  ;
static tdavxs_cb_Apache__DAV__HooksLocks__remove_locknull_state_func davxs_davxs_cb_Apache__DAV__HooksLocks__remove_locknull_state_func [4] = {
    davxs_cb_Apache__DAV__HooksLocks__remove_locknull_state_obj0,
    davxs_cb_Apache__DAV__HooksLocks__remove_locknull_state_obj1,
    davxs_cb_Apache__DAV__HooksLocks__remove_locknull_state_obj2,
    davxs_cb_Apache__DAV__HooksLocks__remove_locknull_state_obj3
    } ;



/* --- Apache::DAV::HooksLocks -> close_lockdb --- */



static void davxs_cb_Apache__DAV__HooksLocks__close_lockdb (SV * __cbdest,dav_lockdb * lockdb)
    {

    int __cnt ;
    
    dSP ;
    ENTER ;
    SAVETMPS ;
    PUSHMARK(SP) ;
    PUSHs(__cbdest) ;
    PUSHs(davxs_Apache__DAV__LockDB_2obj(lockdb)) ;

    PUTBACK ;
    __cnt = perl_call_method("close_lockdb", G_VOID) ;


    if (__cnt != 0)
        croak ("davxs_cb_Apache__DAV__HooksLocks__close_lockdb expected 0 return values") ;

    SPAGAIN ;

    PUTBACK ;
    FREETMPS ;
    LEAVE ;
    
   

    }
   


static void davxs_cb_Apache__DAV__HooksLocks__close_lockdb_obj0 (dav_lockdb * lockdb)
    {
     davxs_cb_Apache__DAV__HooksLocks__close_lockdb (davxs_Apache__DAV__HooksLocks_obj[0],lockdb) ;
    }



static void davxs_cb_Apache__DAV__HooksLocks__close_lockdb_obj1 (dav_lockdb * lockdb)
    {
     davxs_cb_Apache__DAV__HooksLocks__close_lockdb (davxs_Apache__DAV__HooksLocks_obj[1],lockdb) ;
    }



static void davxs_cb_Apache__DAV__HooksLocks__close_lockdb_obj2 (dav_lockdb * lockdb)
    {
     davxs_cb_Apache__DAV__HooksLocks__close_lockdb (davxs_Apache__DAV__HooksLocks_obj[2],lockdb) ;
    }



static void davxs_cb_Apache__DAV__HooksLocks__close_lockdb_obj3 (dav_lockdb * lockdb)
    {
     davxs_cb_Apache__DAV__HooksLocks__close_lockdb (davxs_Apache__DAV__HooksLocks_obj[3],lockdb) ;
    }

typedef void (*tdavxs_cb_Apache__DAV__HooksLocks__close_lockdb_func)(dav_lockdb * lockdb)  ;
static tdavxs_cb_Apache__DAV__HooksLocks__close_lockdb_func davxs_davxs_cb_Apache__DAV__HooksLocks__close_lockdb_func [4] = {
    davxs_cb_Apache__DAV__HooksLocks__close_lockdb_obj0,
    davxs_cb_Apache__DAV__HooksLocks__close_lockdb_obj1,
    davxs_cb_Apache__DAV__HooksLocks__close_lockdb_obj2,
    davxs_cb_Apache__DAV__HooksLocks__close_lockdb_obj3
    } ;



/* --- Apache::DAV::HooksLocks -> open_lockdb --- */



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__open_lockdb (SV * __cbdest,request_rec * r,int ro,int force,dav_lockdb * * lockdb)
    {
    Apache__DAV__Error __retval ;
    SV * __retsv ;

    int __cnt ;
    
    dSP ;
    ENTER ;
    SAVETMPS ;
    PUSHMARK(SP) ;
    PUSHs(__cbdest) ;
    PUSHs(davxs_Apache_2obj(r)) ;
    PUSHs(davxs_IV_2obj(ro)) ;
    PUSHs(davxs_IV_2obj(force)) ;

    PUTBACK ;
    __cnt = perl_call_method("open_lockdb", G_ARRAY) ;


    if (__cnt != 2)
        croak ("davxs_cb_Apache__DAV__HooksLocks__open_lockdb expected 2 return values") ;

    SPAGAIN ;
    __retsv = POPs;
    __retval = (Apache__DAV__Error)davxs_sv2_Apache__DAV__Error(__retsv);
    __retsv = POPs;
    *lockdb = (dav_lockdb *)davxs_sv2_Apache__DAV__LockDB(__retsv);

    PUTBACK ;
    FREETMPS ;
    LEAVE ;
    
   
    return __retval ;

    }
   


static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__open_lockdb_obj0 (request_rec * r,int ro,int force,dav_lockdb * * lockdb)
    {
    return davxs_cb_Apache__DAV__HooksLocks__open_lockdb (davxs_Apache__DAV__HooksLocks_obj[0],r,ro,force,lockdb) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__open_lockdb_obj1 (request_rec * r,int ro,int force,dav_lockdb * * lockdb)
    {
    return davxs_cb_Apache__DAV__HooksLocks__open_lockdb (davxs_Apache__DAV__HooksLocks_obj[1],r,ro,force,lockdb) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__open_lockdb_obj2 (request_rec * r,int ro,int force,dav_lockdb * * lockdb)
    {
    return davxs_cb_Apache__DAV__HooksLocks__open_lockdb (davxs_Apache__DAV__HooksLocks_obj[2],r,ro,force,lockdb) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__open_lockdb_obj3 (request_rec * r,int ro,int force,dav_lockdb * * lockdb)
    {
    return davxs_cb_Apache__DAV__HooksLocks__open_lockdb (davxs_Apache__DAV__HooksLocks_obj[3],r,ro,force,lockdb) ;
    }

typedef Apache__DAV__Error (*tdavxs_cb_Apache__DAV__HooksLocks__open_lockdb_func)(request_rec * r,int ro,int force,dav_lockdb * * lockdb)  ;
static tdavxs_cb_Apache__DAV__HooksLocks__open_lockdb_func davxs_davxs_cb_Apache__DAV__HooksLocks__open_lockdb_func [4] = {
    davxs_cb_Apache__DAV__HooksLocks__open_lockdb_obj0,
    davxs_cb_Apache__DAV__HooksLocks__open_lockdb_obj1,
    davxs_cb_Apache__DAV__HooksLocks__open_lockdb_obj2,
    davxs_cb_Apache__DAV__HooksLocks__open_lockdb_obj3
    } ;



/* --- Apache::DAV::HooksLocks -> compare_locktoken --- */



static int davxs_cb_Apache__DAV__HooksLocks__compare_locktoken (SV * __cbdest,const dav_locktoken * lt1,const dav_locktoken * lt2)
    {
    int __retval ;
    SV * __retsv ;

    int __cnt ;
    
    dSP ;
    ENTER ;
    SAVETMPS ;
    PUSHMARK(SP) ;
    PUSHs(__cbdest) ;
    PUSHs(davxs_Apache__DAV__LockToken_2obj(lt1)) ;
    PUSHs(davxs_Apache__DAV__LockToken_2obj(lt2)) ;

    PUTBACK ;
    __cnt = perl_call_method("compare_locktoken", G_SCALAR) ;


    if (__cnt != 1)
        croak ("davxs_cb_Apache__DAV__HooksLocks__compare_locktoken expected 1 return values") ;

    SPAGAIN ;
    __retsv = POPs;
    __retval = (int)davxs_sv2_IV(__retsv);

    PUTBACK ;
    FREETMPS ;
    LEAVE ;
    
   
    return __retval ;

    }
   


static int davxs_cb_Apache__DAV__HooksLocks__compare_locktoken_obj0 (const dav_locktoken * lt1,const dav_locktoken * lt2)
    {
    return davxs_cb_Apache__DAV__HooksLocks__compare_locktoken (davxs_Apache__DAV__HooksLocks_obj[0],lt1,lt2) ;
    }



static int davxs_cb_Apache__DAV__HooksLocks__compare_locktoken_obj1 (const dav_locktoken * lt1,const dav_locktoken * lt2)
    {
    return davxs_cb_Apache__DAV__HooksLocks__compare_locktoken (davxs_Apache__DAV__HooksLocks_obj[1],lt1,lt2) ;
    }



static int davxs_cb_Apache__DAV__HooksLocks__compare_locktoken_obj2 (const dav_locktoken * lt1,const dav_locktoken * lt2)
    {
    return davxs_cb_Apache__DAV__HooksLocks__compare_locktoken (davxs_Apache__DAV__HooksLocks_obj[2],lt1,lt2) ;
    }



static int davxs_cb_Apache__DAV__HooksLocks__compare_locktoken_obj3 (const dav_locktoken * lt1,const dav_locktoken * lt2)
    {
    return davxs_cb_Apache__DAV__HooksLocks__compare_locktoken (davxs_Apache__DAV__HooksLocks_obj[3],lt1,lt2) ;
    }

typedef int (*tdavxs_cb_Apache__DAV__HooksLocks__compare_locktoken_func)(const dav_locktoken * lt1,const dav_locktoken * lt2)  ;
static tdavxs_cb_Apache__DAV__HooksLocks__compare_locktoken_func davxs_davxs_cb_Apache__DAV__HooksLocks__compare_locktoken_func [4] = {
    davxs_cb_Apache__DAV__HooksLocks__compare_locktoken_obj0,
    davxs_cb_Apache__DAV__HooksLocks__compare_locktoken_obj1,
    davxs_cb_Apache__DAV__HooksLocks__compare_locktoken_obj2,
    davxs_cb_Apache__DAV__HooksLocks__compare_locktoken_obj3
    } ;



/* --- Apache::DAV::HooksLocks -> format_locktoken --- */



static const char * davxs_cb_Apache__DAV__HooksLocks__format_locktoken (SV * __cbdest,pool * p,const dav_locktoken * locktoken)
    {
    const char * __retval ;
    SV * __retsv ;

    int __cnt ;
    
    dSP ;
    ENTER ;
    SAVETMPS ;
    PUSHMARK(SP) ;
    PUSHs(__cbdest) ;
    PUSHs(davxs_Apache__Pool_2obj(p)) ;
    PUSHs(davxs_Apache__DAV__LockToken_2obj(locktoken)) ;

    PUTBACK ;
    __cnt = perl_call_method("format_locktoken", G_SCALAR) ;


    if (__cnt != 1)
        croak ("davxs_cb_Apache__DAV__HooksLocks__format_locktoken expected 1 return values") ;

    SPAGAIN ;
    __retsv = POPs;
    __retval = (const char *)davxs_sv2_PV(__retsv);

    PUTBACK ;
    FREETMPS ;
    LEAVE ;
    
   
    return __retval ;

    }
   


static const char * davxs_cb_Apache__DAV__HooksLocks__format_locktoken_obj0 (pool * p,const dav_locktoken * locktoken)
    {
    return davxs_cb_Apache__DAV__HooksLocks__format_locktoken (davxs_Apache__DAV__HooksLocks_obj[0],p,locktoken) ;
    }



static const char * davxs_cb_Apache__DAV__HooksLocks__format_locktoken_obj1 (pool * p,const dav_locktoken * locktoken)
    {
    return davxs_cb_Apache__DAV__HooksLocks__format_locktoken (davxs_Apache__DAV__HooksLocks_obj[1],p,locktoken) ;
    }



static const char * davxs_cb_Apache__DAV__HooksLocks__format_locktoken_obj2 (pool * p,const dav_locktoken * locktoken)
    {
    return davxs_cb_Apache__DAV__HooksLocks__format_locktoken (davxs_Apache__DAV__HooksLocks_obj[2],p,locktoken) ;
    }



static const char * davxs_cb_Apache__DAV__HooksLocks__format_locktoken_obj3 (pool * p,const dav_locktoken * locktoken)
    {
    return davxs_cb_Apache__DAV__HooksLocks__format_locktoken (davxs_Apache__DAV__HooksLocks_obj[3],p,locktoken) ;
    }

typedef const char * (*tdavxs_cb_Apache__DAV__HooksLocks__format_locktoken_func)(pool * p,const dav_locktoken * locktoken)  ;
static tdavxs_cb_Apache__DAV__HooksLocks__format_locktoken_func davxs_davxs_cb_Apache__DAV__HooksLocks__format_locktoken_func [4] = {
    davxs_cb_Apache__DAV__HooksLocks__format_locktoken_obj0,
    davxs_cb_Apache__DAV__HooksLocks__format_locktoken_obj1,
    davxs_cb_Apache__DAV__HooksLocks__format_locktoken_obj2,
    davxs_cb_Apache__DAV__HooksLocks__format_locktoken_obj3
    } ;



/* --- Apache::DAV::HooksLocks -> parse_locktoken --- */



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__parse_locktoken (SV * __cbdest,pool * p,const char * char_token,dav_locktoken * * locktoken_p)
    {
    Apache__DAV__Error __retval ;
    SV * __retsv ;

    int __cnt ;
    
    dSP ;
    ENTER ;
    SAVETMPS ;
    PUSHMARK(SP) ;
    PUSHs(__cbdest) ;
    PUSHs(davxs_Apache__Pool_2obj(p)) ;
    PUSHs(davxs_PV_2obj(char_token)) ;

    PUTBACK ;
    __cnt = perl_call_method("parse_locktoken", G_ARRAY) ;


    if (__cnt != 2)
        croak ("davxs_cb_Apache__DAV__HooksLocks__parse_locktoken expected 2 return values") ;

    SPAGAIN ;
    __retsv = POPs;
    __retval = (Apache__DAV__Error)davxs_sv2_Apache__DAV__Error(__retsv);
    __retsv = POPs;
    *locktoken_p = (dav_locktoken *)davxs_sv2_Apache__DAV__LockToken(__retsv);

    PUTBACK ;
    FREETMPS ;
    LEAVE ;
    
   
    return __retval ;

    }
   


static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__parse_locktoken_obj0 (pool * p,const char * char_token,dav_locktoken * * locktoken_p)
    {
    return davxs_cb_Apache__DAV__HooksLocks__parse_locktoken (davxs_Apache__DAV__HooksLocks_obj[0],p,char_token,locktoken_p) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__parse_locktoken_obj1 (pool * p,const char * char_token,dav_locktoken * * locktoken_p)
    {
    return davxs_cb_Apache__DAV__HooksLocks__parse_locktoken (davxs_Apache__DAV__HooksLocks_obj[1],p,char_token,locktoken_p) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__parse_locktoken_obj2 (pool * p,const char * char_token,dav_locktoken * * locktoken_p)
    {
    return davxs_cb_Apache__DAV__HooksLocks__parse_locktoken (davxs_Apache__DAV__HooksLocks_obj[2],p,char_token,locktoken_p) ;
    }



static Apache__DAV__Error davxs_cb_Apache__DAV__HooksLocks__parse_locktoken_obj3 (pool * p,const char * char_token,dav_locktoken * * locktoken_p)
    {
    return davxs_cb_Apache__DAV__HooksLocks__parse_locktoken (davxs_Apache__DAV__HooksLocks_obj[3],p,char_token,locktoken_p) ;
    }

typedef Apache__DAV__Error (*tdavxs_cb_Apache__DAV__HooksLocks__parse_locktoken_func)(pool * p,const char * char_token,dav_locktoken * * locktoken_p)  ;
static tdavxs_cb_Apache__DAV__HooksLocks__parse_locktoken_func davxs_davxs_cb_Apache__DAV__HooksLocks__parse_locktoken_func [4] = {
    davxs_cb_Apache__DAV__HooksLocks__parse_locktoken_obj0,
    davxs_cb_Apache__DAV__HooksLocks__parse_locktoken_obj1,
    davxs_cb_Apache__DAV__HooksLocks__parse_locktoken_obj2,
    davxs_cb_Apache__DAV__HooksLocks__parse_locktoken_obj3
    } ;



/* --- Apache::DAV::HooksLocks -> get_supportedlock --- */



static const char * davxs_cb_Apache__DAV__HooksLocks__get_supportedlock (SV * __cbdest)
    {
    const char * __retval ;
    SV * __retsv ;

    int __cnt ;
    
    dSP ;
    ENTER ;
    SAVETMPS ;
    PUSHMARK(SP) ;
    PUSHs(__cbdest) ;

    PUTBACK ;
    __cnt = perl_call_method("get_supportedlock", G_SCALAR) ;


    if (__cnt != 1)
        croak ("davxs_cb_Apache__DAV__HooksLocks__get_supportedlock expected 1 return values") ;

    SPAGAIN ;
    __retsv = POPs;
    __retval = (const char *)davxs_sv2_PV(__retsv);

    PUTBACK ;
    FREETMPS ;
    LEAVE ;
    
   
    return __retval ;

    }
   


static const char * davxs_cb_Apache__DAV__HooksLocks__get_supportedlock_obj0 ()
    {
    return davxs_cb_Apache__DAV__HooksLocks__get_supportedlock (davxs_Apache__DAV__HooksLocks_obj[0]) ;
    }



static const char * davxs_cb_Apache__DAV__HooksLocks__get_supportedlock_obj1 ()
    {
    return davxs_cb_Apache__DAV__HooksLocks__get_supportedlock (davxs_Apache__DAV__HooksLocks_obj[1]) ;
    }



static const char * davxs_cb_Apache__DAV__HooksLocks__get_supportedlock_obj2 ()
    {
    return davxs_cb_Apache__DAV__HooksLocks__get_supportedlock (davxs_Apache__DAV__HooksLocks_obj[2]) ;
    }



static const char * davxs_cb_Apache__DAV__HooksLocks__get_supportedlock_obj3 ()
    {
    return davxs_cb_Apache__DAV__HooksLocks__get_supportedlock (davxs_Apache__DAV__HooksLocks_obj[3]) ;
    }

typedef const char * (*tdavxs_cb_Apache__DAV__HooksLocks__get_supportedlock_func)()  ;
static tdavxs_cb_Apache__DAV__HooksLocks__get_supportedlock_func davxs_davxs_cb_Apache__DAV__HooksLocks__get_supportedlock_func [4] = {
    davxs_cb_Apache__DAV__HooksLocks__get_supportedlock_obj0,
    davxs_cb_Apache__DAV__HooksLocks__get_supportedlock_obj1,
    davxs_cb_Apache__DAV__HooksLocks__get_supportedlock_obj2,
    davxs_cb_Apache__DAV__HooksLocks__get_supportedlock_obj3
    } ;


MODULE = Apache::DAV::HooksLocks    PACKAGE = Apache::DAV::HooksLocks 

const char *
get_supportedlock(__self)
    Apache::DAV::HooksLocks __self
CODE:
    RETVAL = (*__self->get_supportedlock)();
OUTPUT:
    RETVAL


MODULE = Apache::DAV::HooksLocks    PACKAGE = Apache::DAV::HooksLocks 

Apache::DAV::Error
parse_locktoken(__self, p, char_token)
    Apache::DAV::HooksLocks __self
    Apache::Pool p
    const char * char_token
PREINIT:
    Apache__DAV__LockToken locktoken_p;
PPCODE:
    RETVAL = (*__self->parse_locktoken)(p, char_token, &locktoken_p);
    XSprePUSH;
    EXTEND(SP, 2) ;
    PUSHs(davxs_Apache__DAV__Error_2obj(RETVAL)) ;
    PUSHs(davxs_Apache__DAV__LockToken_2obj(locktoken_p)) ;

MODULE = Apache::DAV::HooksLocks    PACKAGE = Apache::DAV::HooksLocks 

const char *
format_locktoken(__self, p, locktoken)
    Apache::DAV::HooksLocks __self
    Apache::Pool p
    Apache::DAV::LockToken locktoken
CODE:
    RETVAL = (*__self->format_locktoken)(p, locktoken);
OUTPUT:
    RETVAL


MODULE = Apache::DAV::HooksLocks    PACKAGE = Apache::DAV::HooksLocks 

int
compare_locktoken(__self, lt1, lt2)
    Apache::DAV::HooksLocks __self
    Apache::DAV::LockToken lt1
    Apache::DAV::LockToken lt2
CODE:
    RETVAL = (*__self->compare_locktoken)(lt1, lt2);
OUTPUT:
    RETVAL


MODULE = Apache::DAV::HooksLocks    PACKAGE = Apache::DAV::HooksLocks 

Apache::DAV::Error
open_lockdb(__self, r, ro=0, force=0)
    Apache::DAV::HooksLocks __self
    Apache r
    int ro
    int force
PREINIT:
    Apache__DAV__LockDB lockdb;
PPCODE:
    RETVAL = (*__self->open_lockdb)(r, ro, force, &lockdb);
    XSprePUSH;
    EXTEND(SP, 2) ;
    PUSHs(davxs_Apache__DAV__Error_2obj(RETVAL)) ;
    PUSHs(davxs_Apache__DAV__LockDB_2obj(lockdb)) ;

MODULE = Apache::DAV::HooksLocks    PACKAGE = Apache::DAV::HooksLocks 

void
close_lockdb(__self, lockdb)
    Apache::DAV::HooksLocks __self
    Apache::DAV::LockDB lockdb
CODE:
    (*__self->close_lockdb)(lockdb);


MODULE = Apache::DAV::HooksLocks    PACKAGE = Apache::DAV::HooksLocks 

Apache::DAV::Error
remove_locknull_state(__self, lockdb, resource)
    Apache::DAV::HooksLocks __self
    Apache::DAV::LockDB lockdb
    Apache::DAV::Resource resource
CODE:
    RETVAL = (*__self->remove_locknull_state)(lockdb, resource);
OUTPUT:
    RETVAL


MODULE = Apache::DAV::HooksLocks    PACKAGE = Apache::DAV::HooksLocks 

Apache::DAV::Error
create_lock(__self, lockdb, resource)
    Apache::DAV::HooksLocks __self
    Apache::DAV::LockDB lockdb
    Apache::DAV::Resource resource
PREINIT:
    Apache__DAV__Lock lock;
PPCODE:
    RETVAL = (*__self->create_lock)(lockdb, resource, &lock);
    XSprePUSH;
    EXTEND(SP, 2) ;
    PUSHs(davxs_Apache__DAV__Error_2obj(RETVAL)) ;
    PUSHs(davxs_Apache__DAV__Lock_2obj(lock)) ;

MODULE = Apache::DAV::HooksLocks    PACKAGE = Apache::DAV::HooksLocks 

Apache::DAV::Error
get_locks(__self, lockdb, resource, calltype)
    Apache::DAV::HooksLocks __self
    Apache::DAV::LockDB lockdb
    Apache::DAV::Resource resource
    int calltype
PREINIT:
    Apache__DAV__Lock locks;
PPCODE:
    RETVAL = (*__self->get_locks)(lockdb, resource, calltype, &locks);
    XSprePUSH;
    EXTEND(SP, 2) ;
    PUSHs(davxs_Apache__DAV__Error_2obj(RETVAL)) ;
    PUSHs(davxs_Apache__DAV__Lock_2obj(locks)) ;

MODULE = Apache::DAV::HooksLocks    PACKAGE = Apache::DAV::HooksLocks 

Apache::DAV::Error
find_lock(__self, lockdb, resource, locktoken, partial_ok)
    Apache::DAV::HooksLocks __self
    Apache::DAV::LockDB lockdb
    Apache::DAV::Resource resource
    Apache::DAV::LockToken locktoken
    int partial_ok
PREINIT:
    Apache__DAV__Lock lock;
PPCODE:
    RETVAL = (*__self->find_lock)(lockdb, resource, locktoken, partial_ok, &lock);
    XSprePUSH;
    EXTEND(SP, 2) ;
    PUSHs(davxs_Apache__DAV__Error_2obj(RETVAL)) ;
    PUSHs(davxs_Apache__DAV__Lock_2obj(lock)) ;

MODULE = Apache::DAV::HooksLocks    PACKAGE = Apache::DAV::HooksLocks 

Apache::DAV::Error
append_locks(__self, lockdb, resource, make_indirect, lock)
    Apache::DAV::HooksLocks __self
    Apache::DAV::LockDB lockdb
    Apache::DAV::Resource resource
    int make_indirect
    Apache::DAV::Lock lock
CODE:
    RETVAL = (*__self->append_locks)(lockdb, resource, make_indirect, lock);
OUTPUT:
    RETVAL


MODULE = Apache::DAV::HooksLocks    PACKAGE = Apache::DAV::HooksLocks 

Apache::DAV::Error
remove_lock(__self, lockdb, resource, locktoken)
    Apache::DAV::HooksLocks __self
    Apache::DAV::LockDB lockdb
    Apache::DAV::Resource resource
    Apache::DAV::LockToken locktoken
CODE:
    RETVAL = (*__self->remove_lock)(lockdb, resource, locktoken);
OUTPUT:
    RETVAL


MODULE = Apache::DAV::HooksLocks    PACKAGE = Apache::DAV::HooksLocks 

Apache::DAV::Error
refresh_locks(__self, lockdb, resource, ltl, new_time)
    Apache::DAV::HooksLocks __self
    Apache::DAV::LockDB lockdb
    Apache::DAV::Resource resource
    Apache::DAV::LockTokenList ltl
    time_t new_time
PREINIT:
    Apache__DAV__Lock locks;
PPCODE:
    RETVAL = (*__self->refresh_locks)(lockdb, resource, ltl, new_time, &locks);
    XSprePUSH;
    EXTEND(SP, 2) ;
    PUSHs(davxs_Apache__DAV__Error_2obj(RETVAL)) ;
    PUSHs(davxs_Apache__DAV__Lock_2obj(locks)) ;

MODULE = Apache::DAV::HooksLocks    PACKAGE = Apache::DAV::HooksLocks 

Apache::DAV::Error
lookup_resource(__self, lockdb, locktoken, start_resource)
    Apache::DAV::HooksLocks __self
    Apache::DAV::LockDB lockdb
    Apache::DAV::LockToken locktoken
    Apache::DAV::Resource start_resource
PREINIT:
    Apache__DAV__Resource resource;
PPCODE:
    RETVAL = (*__self->lookup_resource)(lockdb, locktoken, start_resource, &resource);
    XSprePUSH;
    EXTEND(SP, 2) ;
    PUSHs(davxs_Apache__DAV__Error_2obj(RETVAL)) ;
    PUSHs(davxs_Apache__DAV__Resource_2obj(resource)) ;

MODULE = Apache::DAV::HooksLocks    PACKAGE = Apache::DAV::HooksLocks 



SV *
new (class,initializer=NULL)
    char * class
    SV * initializer 
PREINIT:
    SV * svobj ;
    Apache__DAV__HooksLocks  cobj ;
    SV * tmpsv ;
CODE:
    davxs_Apache__DAV__HooksLocks_create_obj(cobj,svobj,RETVAL,malloc(sizeof(*cobj))) ;

    if (initializer) {
        if (!SvROK(initializer) || !(tmpsv = SvRV(initializer))) 
            croak ("initializer for Apache::DAV::HooksLocks::new is not a reference") ;

        if (SvTYPE(tmpsv) == SVt_PVHV || SvTYPE(tmpsv) == SVt_PVMG)  
            Apache__DAV__HooksLocks_new_init (aTHX_ cobj, tmpsv, 0) ;
        else if (SvTYPE(tmpsv) == SVt_PVAV) {
            int i ;
            SvGROW(svobj, sizeof (*cobj) * av_len((AV *)tmpsv)) ;     
            for (i = 0; i <= av_len((AV *)tmpsv); i++) {
                SV * * itemrv = av_fetch((AV *)tmpsv, i, 0) ;
                SV * item ;
                if (!itemrv || !*itemrv || !SvROK(*itemrv) || !(item = SvRV(*itemrv))) 
                    croak ("array element of initializer for Apache::DAV::HooksLocks::new is not a reference") ;
                Apache__DAV__HooksLocks_new_init (aTHX_ &cobj[i], item, 1) ;
            }
        }
        else {
             croak ("initializer for Apache::DAV::HooksLocks::new is not a hash/array/object reference") ;
        }
    }
OUTPUT:
    RETVAL 

MODULE = Apache::DAV::HooksLocks    PACKAGE = Apache::DAV::HooksLocks 



void
init_callbacks (obj)
    SV *  obj
PREINIT:
    int  n = -1 ;
    int  i ;
    Apache__DAV__HooksLocks cobj = (Apache__DAV__HooksLocks)davxs_sv2_Apache__DAV__HooksLocks(obj) ;
    SV * ref ;
    SV * perl_obj ;
CODE:

    perl_obj = SvRV(obj) ;
    ref = newRV_noinc(perl_obj) ;

    for (i=0;i < 4;i++)
        {
        if (davxs_Apache__DAV__HooksLocks_obj[i] == ref)
            {
            n = i ;
            break ;
            }
        }

    if (n < 0)
        for (i=0;i < 4;i++)
            {
            if (davxs_Apache__DAV__HooksLocks_obj[i] == NULL)
                {
                n = i ;
                break ;
                }
            }
        
    if (n < 0)
        croak ("Limit for concurrent object callbacks reached for Apache::DAV::HooksLocks. Limit is 4") ;

    davxs_Apache__DAV__HooksLocks_obj[n] = ref ;
    cobj -> get_supportedlock = davxs_davxs_cb_Apache__DAV__HooksLocks__get_supportedlock_func[n] ;
    cobj -> parse_locktoken = davxs_davxs_cb_Apache__DAV__HooksLocks__parse_locktoken_func[n] ;
    cobj -> format_locktoken = davxs_davxs_cb_Apache__DAV__HooksLocks__format_locktoken_func[n] ;
    cobj -> compare_locktoken = davxs_davxs_cb_Apache__DAV__HooksLocks__compare_locktoken_func[n] ;
    cobj -> open_lockdb = davxs_davxs_cb_Apache__DAV__HooksLocks__open_lockdb_func[n] ;
    cobj -> close_lockdb = davxs_davxs_cb_Apache__DAV__HooksLocks__close_lockdb_func[n] ;
    cobj -> remove_locknull_state = davxs_davxs_cb_Apache__DAV__HooksLocks__remove_locknull_state_func[n] ;
    cobj -> create_lock = davxs_davxs_cb_Apache__DAV__HooksLocks__create_lock_func[n] ;
    cobj -> get_locks = davxs_davxs_cb_Apache__DAV__HooksLocks__get_locks_func[n] ;
    cobj -> find_lock = davxs_davxs_cb_Apache__DAV__HooksLocks__find_lock_func[n] ;
    cobj -> append_locks = davxs_davxs_cb_Apache__DAV__HooksLocks__append_locks_func[n] ;
    cobj -> remove_lock = davxs_davxs_cb_Apache__DAV__HooksLocks__remove_lock_func[n] ;
    cobj -> refresh_locks = davxs_davxs_cb_Apache__DAV__HooksLocks__refresh_locks_func[n] ;
    cobj -> lookup_resource = davxs_davxs_cb_Apache__DAV__HooksLocks__lookup_resource_func[n] ;
    

PROTOTYPES: disabled

BOOT:
    items = items; /* -Wall */

